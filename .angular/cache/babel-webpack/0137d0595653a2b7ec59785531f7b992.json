{"ast":null,"code":"\"use strict\";\n/* tslint:disable:no-unused-variable */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar testing_1 = require(\"@angular/core/testing\");\n\nvar user_component_1 = require(\"./user.component\");\n\nvar user_service_1 = require(\"./user.service\");\n\nvar data_service_1 = require(\"../shared/data.service\");\n\ndescribe('Component: User', function () {\n  beforeEach(function () {\n    testing_1.TestBed.configureTestingModule({\n      declarations: [user_component_1.UserComponent]\n    });\n  });\n  it('should create the app', function () {\n    var fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n    var app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });\n  it('should use the user name from the service', function () {\n    var fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n    var app = fixture.debugElement.componentInstance;\n    var userService = fixture.debugElement.injector.get(user_service_1.UserService);\n    fixture.detectChanges();\n    expect(userService.user.name).toEqual(app.user.name);\n  });\n  it('should display the user name if user is logged in', function () {\n    var fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n    var app = fixture.debugElement.componentInstance;\n    app.isLoggedIn = true;\n    fixture.detectChanges();\n    var compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).toContain(app.user.name);\n  });\n  it('shouldn\\'t display the user name if user is not logged in', function () {\n    var fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n    var app = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n    var compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).not.toContain(app.user.name);\n  });\n  it('shouldn\\'t fetch data successfully if not called asynchronously', function () {\n    var fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n    var app = fixture.debugElement.componentInstance;\n    var dataService = fixture.debugElement.injector.get(data_service_1.DataService);\n    var spy = spyOn(dataService, 'getDetails').and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    expect(app.data).toBe(undefined);\n  }); // it('should fetch data successfully if called asynchronously', waitForAsync(() => {\n  //   let fixture = TestBed.createComponent(UserComponent);\n  //   let app = fixture.debugElement.componentInstance;\n  //   let dataService = fixture.debugElement.injector.get(DataService);\n  //   let spy = spyOn(dataService, 'getDetails')\n  //     .and.returnValue(Promise.resolve('Data'));\n  //   fixture.detectChanges();\n  //   fixture.whenStable().then(() => {\n  //     expect(app.data).toBe('Data');\n  //   });\n  // }));\n  // it('should fetch data successfully if called asynchronously', fakeAsync(() => {\n  //   let fixture = TestBed.createComponent(UserComponent);\n  //   let app = fixture.debugElement.componentInstance;\n  //   let dataService = fixture.debugElement.injector.get(DataService);\n  //   let spy = spyOn(dataService, 'getDetails')\n  //     .and.returnValue(Promise.resolve('Data'));\n  //   fixture.detectChanges();\n  //   tick();\n  //   expect(app.data).toBe('Data');\n  // }));\n});","map":{"version":3,"sources":["/Users/beata/Downloads/testing-final/src/app/user/user.component.spec.ts"],"names":["Object","defineProperty","exports","value","testing_1","require","user_component_1","user_service_1","data_service_1","describe","beforeEach","TestBed","configureTestingModule","declarations","UserComponent","it","fixture","createComponent","app","debugElement","componentInstance","expect","toBeTruthy","userService","injector","get","UserService","detectChanges","user","name","toEqual","isLoggedIn","compiled","nativeElement","querySelector","textContent","toContain","not","dataService","DataService","spy","spyOn","and","returnValue","Promise","resolve","data","toBe","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n/* tslint:disable:no-unused-variable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst testing_1 = require(\"@angular/core/testing\");\nconst user_component_1 = require(\"./user.component\");\nconst user_service_1 = require(\"./user.service\");\nconst data_service_1 = require(\"../shared/data.service\");\ndescribe('Component: User', () => {\n    beforeEach(() => {\n        testing_1.TestBed.configureTestingModule({\n            declarations: [user_component_1.UserComponent]\n        });\n    });\n    it('should create the app', () => {\n        let fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n        let app = fixture.debugElement.componentInstance;\n        expect(app).toBeTruthy();\n    });\n    it('should use the user name from the service', () => {\n        let fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n        let app = fixture.debugElement.componentInstance;\n        let userService = fixture.debugElement.injector.get(user_service_1.UserService);\n        fixture.detectChanges();\n        expect(userService.user.name).toEqual(app.user.name);\n    });\n    it('should display the user name if user is logged in', () => {\n        let fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n        let app = fixture.debugElement.componentInstance;\n        app.isLoggedIn = true;\n        fixture.detectChanges();\n        let compiled = fixture.debugElement.nativeElement;\n        expect(compiled.querySelector('p').textContent).toContain(app.user.name);\n    });\n    it('shouldn\\'t display the user name if user is not logged in', () => {\n        let fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n        let app = fixture.debugElement.componentInstance;\n        fixture.detectChanges();\n        let compiled = fixture.debugElement.nativeElement;\n        expect(compiled.querySelector('p').textContent).not.toContain(app.user.name);\n    });\n    it('shouldn\\'t fetch data successfully if not called asynchronously', () => {\n        let fixture = testing_1.TestBed.createComponent(user_component_1.UserComponent);\n        let app = fixture.debugElement.componentInstance;\n        let dataService = fixture.debugElement.injector.get(data_service_1.DataService);\n        let spy = spyOn(dataService, 'getDetails')\n            .and.returnValue(Promise.resolve('Data'));\n        fixture.detectChanges();\n        expect(app.data).toBe(undefined);\n    });\n    // it('should fetch data successfully if called asynchronously', waitForAsync(() => {\n    //   let fixture = TestBed.createComponent(UserComponent);\n    //   let app = fixture.debugElement.componentInstance;\n    //   let dataService = fixture.debugElement.injector.get(DataService);\n    //   let spy = spyOn(dataService, 'getDetails')\n    //     .and.returnValue(Promise.resolve('Data'));\n    //   fixture.detectChanges();\n    //   fixture.whenStable().then(() => {\n    //     expect(app.data).toBe('Data');\n    //   });\n    // }));\n    // it('should fetch data successfully if called asynchronously', fakeAsync(() => {\n    //   let fixture = TestBed.createComponent(UserComponent);\n    //   let app = fixture.debugElement.componentInstance;\n    //   let dataService = fixture.debugElement.injector.get(DataService);\n    //   let spy = spyOn(dataService, 'getDetails')\n    //     .and.returnValue(Promise.resolve('Data'));\n    //   fixture.detectChanges();\n    //   tick();\n    //   expect(app.data).toBe('Data');\n    // }));\n});\n"]},"metadata":{},"sourceType":"script"}